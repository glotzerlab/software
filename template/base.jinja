FROM {{ FROM }}

ARG GIT_SHA
ARG GIT_BRANCH
ARG CONFIGURATION
ARG TAG

ENV GLOTZERLAB_SOFTWARE_GIT_SHA=${GIT_SHA} \
    GLOTZERLAB_SOFTWARE_GIT_BRANCH=${GIT_BRANCH} \
    GLOTZERLAB_SOFTWARE_CONFIGURATION=${CONFIGURATION} \
    GLOTZERLAB_SOFTWARE_TAG=${TAG}

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
  clang-10 \
  cmake \
  curl \
  ffmpeg \
  git \
  hwloc \
  libboost-dev \
  libcereal-dev \
  libclang-10-dev \
  libclang-cpp10-dev \
  libedit-dev \
  libeigen3-dev \
  libevent-dev \
  libhwloc-dev \
  libqhull-dev \
  libtbb-dev \
  libsqlite3-dev \
  llvm-10-dev \
  pybind11-dev \
  python3.9 \
  python3.9-dev \
  python3.9-venv \
  python3.9-distutils \
  zlib1g-dev \
  ca-certificates \
  && rm -rf /var/lib/apt/lists/*


# put clang on the path
ENV PATH=$PATH:/usr/lib/llvm-10/bin

# Link python3.9 to python3 in user path
RUN rm -f /usr/bin/python3 && ln -s "$(which python3.9)" /usr/bin/python3

# prevent python from loading packages from outside the container
# default empty pythonpath
ENV PYTHONPATH=/ignore/pythonpath
# disable user site directories (https://docs.python.org/3/library/site.html#module-site)
RUN sed -i -e 's/ENABLE_USER_SITE = None/ENABLE_USER_SITE = False/g' `python3 -c 'import site; print(site.__file__)'`

RUN curl -sSL https://github.com/embree/embree/archive/v{{ EMBREE_VERSION }}/embree-{{ EMBREE_VERSION }}.tar.gz | tar -xzC /root \
    && cd /root/embree-{{ EMBREE_VERSION }} \
    && mkdir build && cd build \
    && cmake ../ -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_INSTALL_LIBDIR=lib/ -DCMAKE_BUILD_TYPE=Release -DEMBREE_TUTORIALS=OFF -DEMBREE_MAX_ISA="AVX2" -DEMBREE_ISPC_SUPPORT=OFF \
    && make install -j {{ MAKEJOBS }} \
    && cd / && rm -rf /root/embree-*

# mount points for filesystems on clusters
RUN mkdir -p /nfs \
    mkdir -p /oasis \
    mkdir -p /scratch \
    mkdir -p /work \
    mkdir -p /projects \
    mkdir -p /home1

# make a python virtual environment to install packages into
# many pip installable packages clobber scripts that ubuntu provides in bin/ and result
# in broken packages
ENV PATH=/opt/glotzerlab/bin:$PATH \
    CMAKE_PREFIX_PATH=/opt/glotzerlab/bin \
    LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}

# setuptools 65 breaks the gsd build: https://github.com/pypa/setuptools/pull/3505
# pip 22.1 breaks the build.

RUN python3 -m venv /opt/glotzerlab \
    && /opt/glotzerlab/bin/python3 -m pip install --no-cache-dir --upgrade pip==22.2.2 setuptools==64.0.3 wheel

# Install the requirements files
COPY requirements*.txt /

# Fix library search paths
RUN echo "/usr/local/cuda-{{ CUDA_VERSION }}/compat" >> /etc/ld.so.conf.d/999-cuda-glotzerlab.conf
RUN ldconfig
