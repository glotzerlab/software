{% if output == 'script' %}
{% set RUN = '' %}
{% else %}
{% set RUN = 'RUN' %}
{% endif %}

{% if output != 'script' %}

{{ RUN }} export CFLAGS="{{CFLAGS}}" CXXFLAGS="{{CFLAGS}}" \
    && python3 -m pip install -r requirements-source.txt \
    && python3 -m pip cache purge

# build select packages from source with machine specific flags
{{ RUN }} export CFLAGS="{{CFLAGS}}" CXXFLAGS="{{CFLAGS}}" \
    && python3 -m pip install --no-build-isolation --no-binary freud-analysis,gsd -r requirements.txt \
    && python3 -m pip install cython==0.29.36 \
    && python3 -m pip install --no-build-isolation -r requirements-cupy.txt \
    && python3 -m pip cache purge

{% else %}

# Install packages that are build requirements of other packages first.
# Use the pip cache in script builds to reduce time when rerunning the install script.

{% if system == 'summit' %}
{{ RUN }} export CFLAGS="-mcpu=power9 -mtune=power9" CXXFLAGS="-mcpu=power9 -mtune=power9"
while read package; do
  python3 -m pip install --no-build-isolation $package || exit 1
done <requirements-source-summit.txt

 # modern setuptools needed for gsd and other packages\
 python3 -m pip install --upgrade setuptools
{% else %}
{{ RUN }} export CFLAGS="{{CFLAGS}}" CXXFLAGS="{{CFLAGS}}"\
    && python3 -m pip install -r requirements-source.txt \
    || exit 1
{% endif %}

{{ RUN }} export CFLAGS="{{CFLAGS}}" CXXFLAGS="{{CFLAGS}}" \
    && python3 -m pip install --no-build-isolation --no-binary freud-analysis,gsd -r requirements.txt \
    && chmod o+rX `python3 -c "import site; print(site.getsitepackages()[0])"`/flow/templates/* \
    || exit 1

{% if system != 'crusher' and system != 'frontier' %}
{{ RUN }} export CFLAGS="{{CFLAGS}}" CXXFLAGS="{{CFLAGS}}" \
    && python3 -m pip install cython==0.29.36
    && python3 -m pip install --no-build-isolation -r requirements-cupy.txt \
    || exit 1
{% endif %}

{% endif %}

{% if system != 'summit' %}

{% if output == 'script' %}
if [ ! -n "$(ls -d $ROOT/lib/python*/site-packages/fresnel)" ]
then
{% endif %}
{{ RUN }} git clone --recursive --branch {{ FRESNEL_VERSION }} --depth 1 https://github.com/glotzerlab/fresnel \
    && cd fresnel \
    && mkdir -p build \
    && cd build \
    && export CFLAGS="{{CFLAGS}}" CXXFLAGS="{{CFLAGS}}" \
    && cmake ../ -DENABLE_EMBREE=on -DENABLE_OPTIX=off -Dembree_DIR=/opt/embree-{{ EMBREE_VERSION }}.x86_64.linux -DCMAKE_INSTALL_PREFIX=`python3 -c "import site; print(site.getsitepackages()[0])"` \
    && make install -j{{ MAKEJOBS }} \
    && cd ../../ \
    && rm -rf fresnel \
    || exit 1

{% if output == 'script' %}
fi
{% endif %}

{% endif %}


{% if output == 'script' %}
if [ ! -n "$(ls -d $ROOT/lib/python*/site-packages/hoomd)" ]
then
{% endif %}
{{ RUN }} git clone --recursive --branch {{ HOOMD_VERSION }} --depth 1 https://github.com/glotzerlab/hoomd-blue hoomd \
    && cd hoomd \
    && mkdir -p build \
    && cd build \
    && export CFLAGS="{{CFLAGS}}" CXXFLAGS="{{CFLAGS}}" \
    && cmake ../ -DPYTHON_EXECUTABLE="`which python3`" -DENABLE_GPU=on -DENABLE_MPI={{ ENABLE_MPI }} -DENABLE_TBB={{ ENABLE_TBB|default('on') }} -DENABLE_LLVM={{ ENABLE_LLVM|default('on') }} -DBUILD_TESTING=off -DENABLE_MPI_CUDA={{ ENABLE_MPI_CUDA|default('off') }} -DHOOMD_GPU_PLATFORM={{ HOOMD_GPU_PLATFORM|default('CUDA') }} \
    && make install -j{{ MAKEJOBS }} \
    && cd ../../ \
    && rm -rf hoomd \
    || exit 1

{% if output == 'script' %}
fi
{% endif %}
